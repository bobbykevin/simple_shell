#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

#define MAX_COMMAND_LENGTH 100

int main() {
    char command[MAX_COMMAND_LENGTH];
    char *env[] = { NULL };

    while (1) {
        printf("simple_shell> ");  // Display the prompt
        fflush(stdout);           // Flush the output buffer to ensure prompt is displayed

        if (fgets(command, sizeof(command), stdin) == NULL) {
            // Handle end of file (Ctrl+D)
            printf("\n");
            break;
        }

        // Remove the trailing newline character
        command[strlen(command) - 1] = '\0';

        // Fork a child process
        pid_t child_pid = fork();

        if (child_pid == -1) {
            perror("fork");
            exit(1);
        }

        if (child_pid == 0) {
            // Child process
            if (execlp(command, command, NULL) == -1) {
                // Handle executable not found
                fprintf(stderr, "simple_shell: %s: command not found\n", command);
                exit(1);
            }
        } else {
            // Parent process
            int status;
            waitpid(child_pid, &status, 0);

            if (WIFEXITED(status) && WEXITSTATUS(status) != 0) {
                // Handle non-zero exit status
                fprintf(stderr, "simple_shell: %s: command failed with exit status %d\n", command, WEXITSTATUS(status));
            }
        }
    }

    return 0;
}

